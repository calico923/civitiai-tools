# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Node modules (if any JS tooling is added)
node_modules/

# ===========================
# Project specific ignores
# ===========================

# Failed first implementation (reference only)
1st-coding/

# Pre-research outputs (already collected data)
pre-research/outputs/
pre-research/temp_scripts/
pre-research/test_images/

# Research results (keep investigation scripts)
# Note: Keep pre-research/investigations/ and pre-research/scripts/ for reference

# Temporary and debug files
*.tmp
*.temp
*.bak
debug_*/
test_*.log

# Output directories (will be managed by new implementation)
outputs/
downloads/
models/

# Cache directories
.cache/
__cache__/

# Configuration overrides (keep example files)
config.local.yaml
config.local.json
settings.local.*

# API keys and secrets (already in .env)
# .env is already ignored above

# Large data files
*.csv
*.json
*.yaml
!*example*.csv
!*example*.json
!*example*.yaml
!requirements*.txt
!pyproject.toml
!setup.py

# Exclude large investigation results but keep important docs
/docs/*.csv
/docs/*.json
!/docs/*.md

# Claude artifacts
.claude/