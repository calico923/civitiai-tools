version: '3.8'

services:
  civitai-downloader:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: civitai-downloader-v2
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - CIVITAI_API_BASE_URL=https://civitai.com/api
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_DOWNLOADS=3
      - DOWNLOAD_TIMEOUT=300
      - ENABLE_SECURITY_FEATURES=true
    volumes:
      # Data persistence
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./downloads:/app/downloads
      
      # Configuration files
      - ./config/app_config.yml:/app/config/app_config.yml:ro
      - ./config/security_policy.yml:/app/config/security_policy.yml:ro
      
    ports:
      - "8080:8080"  # Web interface (if enabled)
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import src.core.reliability.health_check; exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    
    # Networks
    networks:
      - civitai-network

  # Optional: Database for advanced features
  postgres:
    image: postgres:15-alpine
    container_name: civitai-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=civitai_downloader
      - POSTGRES_USER=civitai
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    secrets:
      - postgres_password
    networks:
      - civitai-network

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: civitai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - civitai-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: civitai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - civitai-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: civitai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - civitai-network

networks:
  civitai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt